<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE codetemplates PUBLIC "-//NetBeans//DTD Editor Code Templates settings 1.0//EN" "http://www.netbeans.org/dtds/EditorCodeTemplates-1_0.dtd">
<codetemplates>
    <codetemplate abbreviation="toncontext" xml:space="preserve">
        <code>@OnEvent(EventConstants.ACTIVATE)
void onActivate(${CONTEXT_TYPE default="Object"} param) {
    // TODO Add content here
}

@OnEvent(EventConstants.PASSIVATE)
${CONTEXT_TYPE} onPassivate() {
    // TODO Add content here
    return null;
}
        </code>
        <description>creates the onActivate and onPassivate methods</description>
    </codetemplate>
    <codetemplate abbreviation="tonformevents" xml:space="preserve">
        <code>// Start form events
@OnEvent(EventConstants.PREPARE_FOR_SUBMIT)
void prepareForSubmit() {
    ${cursor}
    // TODO Add content here
}

@OnEvent(EventConstants.PREPARE_FOR_RENDER)
void prepareForRender() {
    // TODO Add content here
}

@OnEvent(EventConstants.PREPARE)
void prepare() {
    // TODO Add content here
}

@OnEvent(EventConstants.VALIDATE_FORM)
void validateForm() {
    // TODO Add content here
}

@OnEvent(EventConstants.FAILURE)
void failure() {
    // TODO Add content here
}

@OnEvent(EventConstants.SUCCESS)
void onSuccess() {
    // TODO Add content here
}

@OnEvent(EventConstants.SUBMIT)
void onSubmit() {
    // TODO Add content here
}
// End form Events
        </code>
    </codetemplate>
    <codetemplate abbreviation="tinjectpage" xml:space="preserve">
        <code>@InjectPage
private ${PAGE_NAME default=PageType} ${PROPERTY_NAME default=pageName};
        </code>
    </codetemplate>
    <codetemplate abbreviation="tonaction" xml:space="preserve">
        <code>@OnEvent(component="${COMPONENT default=ComponentName}")
${RETURN_TYPE default=Object} onActionFrom${COMPONENT}(${cursor}) {
    // TODO Add content
    return null;
}
        </code>
        <description>Creates the form method events</description>
    </codetemplate>
    <codetemplate abbreviation="tcomponent" xml:space="preserve">
        <code>@Component(id = "${COMPONENT_ID default=componentId}", parameters = {"${PARAMETERS default=value=message}"})
private ${COMPONENT_TYPE default="ComponentType"} ${COMPONENT_ID};
        </code>
        <description>Crates a component</description>
    </codetemplate>
    <codetemplate abbreviation="tontranslator" xml:space="preserve">
        <code>@OnEvent(value = EventConstants.TO_CLIENT, component="${COMPONENT default=ComponentName}")
String onToClientFrom${COMPONENT}() {
    // if (quantity == 0) return "";
    // TODO Add content here
    ${cursor}
    return null;
}

@OnEvent(value = EventConstants.PARSE_CLIENT, component = "${COMPONENT}")
Object onParseClientFrom${COMPONENT}(String input) {
    // if ("".equals(input)) return 0;
    // TODO Add content here
    return null;
}
        </code>
        <description>creates the methods that intercept the translator of a component</description>
    </codetemplate>
    <codetemplate abbreviation="tprop" xml:space="preserve">
        <code>@Property
private ${CLASS_TYPE default="Object"} ${PROP_NAME default="prop"};
        </code>
        <description>creates a property</description>
    </codetemplate>
    <codetemplate abbreviation="taso" xml:space="preserve">
        <code>@ApplicationState
private ${ASO_TYPE default="ASOType"} ${ASO_NAME default="asoName"};
        </code>
        <description>puts an Application State Object</description>
    </codetemplate>
    <codetemplate abbreviation="tjs" xml:space="preserve">
        <code>@IncludeJavaScriptLibrary("${JS default=tapestry.scriptaculous}/dragdrop.js")</code>
        <description>Includes the IncludeJavaScript annotation</description>
    </codetemplate>
    <codetemplate abbreviation="tonsetuprender" xml:space="preserve">
        <code>@SetupRender
void setupRender() {
    // TODO Add content here
    ${cursor}
}
        </code>
        <description>Adds the setupRender event</description>
    </codetemplate>
    <codetemplate abbreviation="tonrendercomponent" xml:space="preserve">
        <code>// Start component render
@SetupRender
void setupRender() {
    // TODO Add content here
    ${cursor}
}

@BeginRender
void beginRender() {
    // TODO Add content here
}

@BeforeRenderTemplate
void beforeRenderTemplate() {
    // TODO Add content here
}

@BeforeRenderBody
void beforeRenderBody() {
    // TODO Add content here
}

@AfterRenderBody
void afterRenderBody() {
    // TODO Add content here
}

@AfterRenderTemplate
void afterRenderTemplate() {
    // TODO Add content here
}

@AfterRender
void afterRender() {
    // TODO Add content here
}

@CleanupRender
void cleanupRender() {
    // TODO Add content here
}
// End component render
        </code>
        <description>Crates the methods that renders the component</description>
    </codetemplate>
    <codetemplate abbreviation="tasset" xml:space="preserve">
        <code>@Inject
@Path("${PATH default=context:images/tapestry_banner.gif}")
private Asset ${ASSET_NAME default=assetName};
        </code>
        <description>Puts an asset</description>
    </codetemplate>
    <codetemplate abbreviation="tonexception" xml:space="preserve">
        <code>@OnEvent("exception")
Object onException(Throwable cause) {
    String msg = cause.getMessage();
    ${cursor}
    return this;
}
        </code>
        <description>Create the method that intercepts action exceptions</description>
    </codetemplate>
    <codetemplate abbreviation="tonpassivate" xml:space="preserve">
        <code>@OnEvent(EventConstants.PASSIVATE)
${RETURN_TYPE default="Object"} onPassivate() {
    // TODO Add content here
    return null;
}
        </code>
        <description>creates the onPassivate method</description>
    </codetemplate>
    <codetemplate abbreviation="tcss" xml:space="preserve">
        <code>@IncludeStylesheet("${CSS default=context:css/style.css}")</code>
        <description>Puts the IncludeStylesheet annotation</description>
    </codetemplate>
    <codetemplate abbreviation="tonactivate" xml:space="preserve">
        <code>@OnEvent(EventConstants.ACTIVATE)
void onActivate(${cursor}) {
    // TODO Add content here
}
        </code>
        <description>creates the onActivate method</description>
    </codetemplate>
    <codetemplate abbreviation="tpagelifecycle" xml:space="preserve">
        <code>@PageLoaded
void onPageLoaded() {
    // TODO Add content here
    ${cursor}
}

@PageAttached
void onPageAttached() {
    // TODO Add content here
}

@PageDetached
void onPageDetached() {
    // TODO Add content here
}
        </code>
        <description>creates the page lifecycle methods</description>
    </codetemplate>
    <codetemplate abbreviation="tonvalidate" xml:space="preserve">
        <code>@OnEvent(value = EventConstants.VALIDATE, component = "${COMPONENT default=ComponentName}")
void onValidateFrom${COMPONENT}(${VALUE_COMPONENT default="Integer"} value) throws ValidationException {
    //    if (value.equals(13)) {
    //        throw new ValidationException("Thirteen is an unlucky number.");
    //    }
    // TODO Add content here
}
        </code>
        <description>crates the method that intercepts the validator of a component, this is useful in business validations</description>
    </codetemplate>
    <codetemplate abbreviation="tinject" xml:space="preserve">
        <code>@Inject
private ${INJECT_TYPE default=ClassType} ${PROPERTY_NAME propertyName};
        </code>
        <description>Inserts the Inject annotation</description>
    </codetemplate>
    <codetemplate abbreviation="tlog" xml:space="preserve">
        <code>@Inject
private Logger log;
        </code>
        <description>Puts the Log annotation</description>
    </codetemplate>
</codetemplates>