<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE codetemplates PUBLIC "-//NetBeans//DTD Editor Code Templates settings 1.0//EN" "http://www.netbeans.org/dtds/EditorCodeTemplates-1_0.dtd">
<codetemplates>
    <codetemplate abbreviation="t5_setuprender" xml:space="preserve">
        <code><![CDATA[@SetupRender
void setupRender() {
    // TODO Add content here
    ${cursor}
}
]]></code>
        <description><![CDATA[Inserts the setupRender method
]]></description>
    </codetemplate>
    <codetemplate abbreviation="t5_pagelifecycle" xml:space="preserve">
        <code><![CDATA[@PageLoaded
void onPageLoaded() {
    // TODO Add content here
    ${cursor}
}

@PageAttached
void onPageAttached() {
    // TODO Add content here
}

@PageDetached
void onPageDetached() {
    // TODO Add content here
}
]]></code>
        <description><![CDATA[Inserts the page lifecycle methods]]></description>
    </codetemplate>
    <codetemplate abbreviation="t5_prop" xml:space="preserve">
        <code><![CDATA[@Property
private ${CLASS_TYPE default="Object"} ${PROP_NAME default="prop"};
]]></code>
        <description><![CDATA[Creates a property with the @Property annotation
]]></description>
    </codetemplate>
    <codetemplate abbreviation="t5_aso" xml:space="preserve">
        <code><![CDATA[@ApplicationState
private ${ASO_TYPE default="ASOType"} ${ASO_NAME default="asoName"};
]]></code>
        <description><![CDATA[Inserts an Application State Object with the @ApplicationState annotation]]></description>
    </codetemplate>
    <codetemplate abbreviation="t5_injectpage" xml:space="preserve">
        <code><![CDATA[@InjectPage
private ${PAGE_NAME default=PageType} ${PROPERTY_NAME default=pageName};
]]></code>
        <description><![CDATA[Inserts the @InjectPage annotation
]]></description>
    </codetemplate>
    <codetemplate abbreviation="t5_log" xml:space="preserve">
        <code><![CDATA[@Inject
private Logger log;
]]></code>
        <description><![CDATA[Inserts the @Log annotation]]></description>
    </codetemplate>
    <codetemplate abbreviation="t5_css" xml:space="preserve">
        <code><![CDATA[@IncludeStylesheet("${CSS default=context:css/style.css}")
]]></code>
        <description><![CDATA[Inserts the @IncludeStylesheet annotation]]></description>
    </codetemplate>
    <codetemplate abbreviation="t5_asset" xml:space="preserve">
        <code><![CDATA[@Inject
@Path("${PATH default=context:images/tapestry_banner.gif}")
private Asset ${ASSET_NAME default=assetName};
]]></code>
        <description><![CDATA[Inserts an asset
]]></description>
    </codetemplate>
    <codetemplate abbreviation="t5_ontranslator" xml:space="preserve">
        <code><![CDATA[@OnEvent(value = EventConstants.TO_CLIENT, component="${COMPONENT default=ComponentName}")
String onToClientFrom${COMPONENT}() {
    // if (quantity == 0) return "";
    // TODO Add content here
    ${cursor}
    return null;
}

@OnEvent(value = EventConstants.PARSE_CLIENT, component = "${COMPONENT}")
Object onParseClientFrom${COMPONENT}(String input) {
    // if ("".equals(input)) return 0;
    // TODO Add content here
    return null;
}
]]></code>
        <description><![CDATA[Creates the methods that converts a value of string to object and object to string]]></description>
    </codetemplate>
    <codetemplate abbreviation="t5_onpassivate" xml:space="preserve">
        <code><![CDATA[@OnEvent(EventConstants.PASSIVATE)
${RETURN_TYPE default="Object"} onPassivate() {
    // TODO Add content here
    ${cursor}
    return null;
}
]]></code>
        <description><![CDATA[Inserts the onPassivate method]]></description>
    </codetemplate>
    <codetemplate abbreviation="t5_rendercomponent" xml:space="preserve">
        <code><![CDATA[// Start component render
@SetupRender
void setupRender() {
    // TODO Add content here
    ${cursor}
}

@BeginRender
void beginRender() {
    // TODO Add content here
}

@BeforeRenderTemplate
void beforeRenderTemplate() {
    // TODO Add content here
}

@BeforeRenderBody
void beforeRenderBody() {
    // TODO Add content here
}

@AfterRenderBody
void afterRenderBody() {
    // TODO Add content here
}

@AfterRenderTemplate
void afterRenderTemplate() {
    // TODO Add content here
}

@AfterRender
void afterRender() {
    // TODO Add content here
}

@CleanupRender
void cleanupRender() {
    // TODO Add content here
}
// End component render
]]></code>
        <description><![CDATA[Crates the method renders]]></description>
    </codetemplate>
    <codetemplate abbreviation="jaxbu" xml:space="preserve">
        <code><![CDATA[
            try {
                javax.xml.bind.JAXBContext jaxbCtx = javax.xml.bind.JAXBContext.newInstance(${UM_OBJ instanceof="java.lang.Object" default="umObj"}.getClass().getPackage().getName());
                javax.xml.bind.Unmarshaller unmarshaller = jaxbCtx.createUnmarshaller();
                ${UM_OBJ} = ${TYPE_CAST cast default=""} unmarshaller.unmarshal(new java.io.File("File path")); //NOI18N
            } catch (javax.xml.bind.JAXBException ex) {
                // XXXTODO Handle exception
                java.util.logging.Logger.getLogger("global").log(java.util.logging.Level.SEVERE, null, ex); //NOI18N
            }
        ]]></code>
        <description><![CDATA[Sample template to unmarshal JAXB objects.]]></description>
    </codetemplate>
    <codetemplate abbreviation="t5_onactivate" xml:space="preserve">
        <code><![CDATA[@OnEvent(EventConstants.ACTIVATE)
void onActivate(${cursor}) {
    // TODO Add content here
}]]></code>
        <description><![CDATA[Inserts the onActivate method]]></description>
    </codetemplate>
    <codetemplate abbreviation="t5_formevents" xml:space="preserve">
        <code><![CDATA[// Start form events
@OnEvent(EventConstants.PREPARE_FOR_SUBMIT)
void prepareForSubmit() {
    ${cursor}
    // TODO Add content here
}

@OnEvent(EventConstants.PREPARE_FOR_RENDER)
void prepareForRender() {
    // TODO Add content here
}

@OnEvent(EventConstants.PREPARE)
void prepare() {
    // TODO Add content here
}

@OnEvent(EventConstants.VALIDATE_FORM)
void validateForm() {
    // TODO Add content here
}

@OnEvent(EventConstants.FAILURE)
void failure() {
    // TODO Add content here
}

@OnEvent(EventConstants.SUCCESS)
void onSuccess() {
    // TODO Add content here
}

@OnEvent(EventConstants.SUBMIT)
void onSubmit() {
    // TODO Add content here
}
// End form Events
]]></code>
        <description><![CDATA[Creates the methods of events form]]></description>
    </codetemplate>
    <codetemplate abbreviation="t5_onaction" xml:space="preserve">
        <code><![CDATA[@OnEvent(component="${COMPONENT default=ComponentName}")
${RETURN_TYPE default=Object} onActionFrom${COMPONENT}(${cursor}) {
    // TODO Add content
    return null;
}
]]></code>
        <description><![CDATA[Creates the action method of a component

]]></description>
    </codetemplate>
    <codetemplate abbreviation="jaxbm" xml:space="preserve">
        <code><![CDATA[try {
                javax.xml.bind.JAXBContext jaxbCtx= javax.xml.bind.JAXBContext.newInstance( ${OBJ2M instanceof="java.lang.Object" default="obj2BMarshalled"}.getClass().getPackage().getName());
                javax.xml.bind.Marshaller marshaller = jaxbCtx.createMarshaller();
                marshaller.setProperty(javax.xml.bind.Marshaller.JAXB_ENCODING, "UTF-8"); //NOI18N
                marshaller.setProperty(javax.xml.bind.Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);
                marshaller.marshal(${OBJ2M} , System.out);
            } catch (javax.xml.bind.JAXBException ex) {
                // XXXTODO Handle exception
                java.util.logging.Logger.getLogger("global").log(java.util.logging.Level.SEVERE, null, ex); //NOI18N
        }]]></code>
        <description><![CDATA[Sample template to marshal JAXB objects.]]></description>
    </codetemplate>
    <codetemplate abbreviation="t5_onexception" xml:space="preserve">
        <code><![CDATA[@OnEvent("exception")
Object onException(Throwable cause) {
    String msg = cause.getMessage();
    ${cursor}
    return this;
}
]]></code>
        <description><![CDATA[Create the method that intercepts exceptions]]></description>
    </codetemplate>
    <codetemplate abbreviation="t5_js" xml:space="preserve">
        <code><![CDATA[@IncludeJavaScriptLibrary("${JS default=tapestry.scriptaculous}/dragdrop.js")
]]></code>
        <description><![CDATA[Inserts the @IncludeJavaScript annotation]]></description>
    </codetemplate>
    <codetemplate abbreviation="t5_component" xml:space="preserve">
        <code><![CDATA[@Component(id = "${COMPONENT_ID default=componentId}", parameters = {"${PARAMETERS default=value=message}"})
private ${COMPONENT_TYPE default="ComponentType"} ${COMPONENT_ID};
]]></code>
        <description><![CDATA[Creates a component]]></description>
    </codetemplate>
    <codetemplate abbreviation="t5_inject" xml:space="preserve">
        <code><![CDATA[@Inject
private ${INJECT_TYPE default=ClassType} ${PROPERTY_NAME propertyName};
]]></code>
        <description><![CDATA[Inserts the @Inject annotation]]></description>
    </codetemplate>
    <codetemplate abbreviation="t5_oncontext" xml:space="preserve">
        <code><![CDATA[@OnEvent(EventConstants.ACTIVATE)
void onActivate(${CONTEXT_TYPE default="Object"} param) {
    // TODO Add content here
    ${cursor}
}

@OnEvent(EventConstants.PASSIVATE)
${CONTEXT_TYPE} onPassivate() {
    // TODO Add content here
    return null;
}
]]></code>
        <description><![CDATA[creates the onActivate and onPassivate methods]]></description>
    </codetemplate>
    <codetemplate abbreviation="t5_onsuccess" xml:space="preserve">
        <code><![CDATA[@OnEvent(EventConstants.SUCCESS)
void onSuccess() {
    // TODO Add content here
    ${cursor}
}
]]></code>
        <description><![CDATA[Inserts the onSuccess method
]]></description>
    </codetemplate>
    <codetemplate abbreviation="t5_onvalidate" xml:space="preserve">
        <code><![CDATA[@OnEvent(value = EventConstants.VALIDATE, component = "${COMPONENT default=ComponentName}")
void onValidateFrom${COMPONENT}(${VALUE_COMPONENT default="Integer"} value) throws ValidationException {
    //    if (value.equals(13)) {
    //        throw new ValidationException("Thirteen is an unlucky number.");
    //    }
    // TODO Add content here
}
]]></code>
        <description><![CDATA[Inserts the method that intercepts a validator of component]]></description>
    </codetemplate>
</codetemplates>
